import PersonCompany : 'PersonCompany.ecore#/'

package PersonCompany

context Person::employer() : Set(Company) 
  post: result = self.PersonJob_Job_role_job
                     .CompanyJob_Company_role_employer
                     ->asSet()

--context Company::employee() : Set(Company) 
--  post: result = self.CompanyJob_Job_role_job
--                     .PersonJob_Person_role_employee
--                     ->asSet()

context Job::bossPlus() : Set(Job)
  post: result = if not (BossWorker_Job_role_boss.oclIsUndefined())
                 then BossWorker_Job_role_boss
                        .bossPlus()
                        ->including(self.BossWorker_Job_role_boss)
                 else Set{}
                 endif
context Job::workerPlus() : Set(Job)
  post: result = workerPlusOnSet( BossWorker_Job_role_worker )
context Job::workerPlusOnSet(s : Set(Job)) : Set(Job)
  post: result = if s.BossWorker_Job_role_worker
                     ->asSet()
                     ->exists( j | s->excludes(j) )
                 then workerPlusOnSet(s->union(s.BossWorker_Job_role_worker->asSet()))
                 else s
                 endif

context Person
  inv personNamesAreUnique: Person.allInstances()->forAll( p |
      self.name=p.name implies self=p
  )

context Company
  inv companyNamesAreUnique: Company.allInstances()->forAll( c |
      self.name=c.name implies self=c
  )

context Job
  inv employeeEmployerAreUnique: Job.allInstances()->forAll( j |
    (     (  self.PersonJob_Person_role_employee
           = j.PersonJob_Person_role_employee)
      and (  self.CompanyJob_Company_role_employer
           = j.CompanyJob_Company_role_employer)
    ) implies (self = j) )

context Job
  inv bossWorkerSameEmployer:
    self.BossWorker_Job_role_worker
        ->forAll( low |   low.CompanyJob_Company_role_employer
                        = self.CompanyJob_Company_role_employer)

--context Job
--  inv bossWorkerIsHierarchy:
--    self.workerPlus()->excludes(self)

context Job
  inv bossBetterPaidThanWorker:
    self.BossWorker_Job_role_worker
        ->forAll( low |   low.salary
                        < self.salary)

endpackage